" vimrc by bohoomil
" vim:ft=vim:

" ### PATHOGEN {{{
execute pathogen#infect()
call pathogen#helptags()
call pathogen#incubate()
filetype plugin indent on
let Vimplate = "/usr/bin/vimplate"
"}}}

" ### BASE SETTINGS {{{
set t_Co=256
colorscheme euphrasia3

set nocompatible
set encoding=utf-8
set modeline
syntax on

set wrap
set linebreak
set display+=lastline

set ruler                  " show the cursor position all the time
set showcmd                " display incomplete commands

" listchars
" de|activate: :set no|list
set listchars=trail:·,precedes:«,extends:»,eol:┘,tab:→\

" -- status line
set cmdheight=1            " command line height
set laststatus=2           " condition to show status line, 2=always.
set ruler                  " show cursor position in status line
set showmode               " show mode in status line
set showcmd                " show partial commands in status line
" fileformat, encoding, type, buffer num, RO/HELP/PREVIEW, mod flag,
" filepath; spacer;  line pos, line/total, percentage
set statusline=\%{&ff}\ \%{&fenc}\ \b%1.3n\ \%#StatusFTP#\%Y\ \%#StatusRO#\%R\ \%#StatusHLP#\%H\ \%#StatusPRV#\%W\ \%#StatusModFlag#\%M\ \%#StatusLine#\%f\%=\%1.7c\ \%1.7l/%L\ \%p%%

" -- folding -- general
set foldmethod=marker      "syntax
set foldnestmax=10         "deepest fold is 10 levels
set foldcolumn=1
"set nofoldenable           "dont fold by default
set foldlevel=0            "this is just what i use

" -- searching & history
set hlsearch               " highlight all search results
set incsearch              " increment search
set ignorecase             " case-insensitive search; opposite noignorecase
set smartcase              " uppercase causes case-sensitive search
set wrapscan               " searches wrap back to the top of file

set nobackup               " don't create backup files
set noswapfile             " don't create swap file

set history=25             " keep 25 lines of command line history
set incsearch              " do incremental searching

" -- improve redrawing
set tf
set nolazyredraw           " turn off lazy redraw
set wildmenu
set wildmode=longest,full
set clipboard=unnamed      " yank and copy to X clipboard

" -- spell check
set spelllang=pl,en_gb

" -- set noexpandtab
set tabstop=2              " set tab keys to 2 spaces
set shiftwidth=2
set expandtab
set nu!                    " line numbering
set smartindent
set bs=2                   " backspace
set noautoindent           " set noautoindent to prevent vim from
                           " inserting unwanted indents when pasting
"}}}

" ### FILETYPES {{{
" -- .t2t
au Filetype txt2tags source $HOME/.vim/syntax/txt2tags.vim
"au BufNewFile,BufRead *.t2t set ft=txt2tags,wrap,br "spell

" -- .rst .rest
" rst -- type :RP (ReST Preview) to preview
":com RP :exec "Vst html" | w! /tmp/test.html | :q | !firefox /tmp/test.html
" riv configuration
let project1 = { 'path': '/mnt/sda3/documents/0_notes/0-tmp',}
let g:riv_projects = [project1]
let g:riv_auto_fold_force = 1
let g:riv_fold_blank = 1
let g:riv_fold_level = 2
"let g:riv_auto_fold1_lines = 1
"let g:riv_auto_fold2_lines = 1
au BufRead,BufNewFile *.rest,rst set ft=rst tw=78

" -- .md .mkd
let g:vim_markdown_folding_disabled=0
let g:vim_markdown_initial_foldlevel=1
au BufRead,BufNewFile *.md,*.mdown,*.markdown set tw=0 ft=mkd
"wm=0

" -- .asc .asciidoc
au BufRead,BufNewFile *.asc,*.asciidoc set tw=0 ft=asciidoc

" -- shell
au BufWritePost,BufRead * if getline(1) =~ "^#!/bin/sh$" | set ft=sh | endif
au BufRead,BufNewFile *.zsh* set ft=zsh
au BufRead .bash_history set ft=sh

" -- ebuild PKGBUILD Pkgfile CHANGELOG README
au BufRead,BufNewFile *.e{build,class} set ts=4 sw=4 noexpandtab set ft=sh
au BufRead,BufNewFile CHANGELOG set ft=asciidoc
au BufRead,BufNewFile Pkgfile set ft=sh
au BufRead,BufNewFile PKGBUILD set ft=sh
au BufRead,BufNewFile README set tw=78

" -- tmux.conf .msmtprc .rtorrent.rc .bash_history dwb
let tmux = "/usr/share/vim/vim73/syntax/tmux.vim"
au Syntax newlang source /usr/share/vim/vim73/syntax/tmux.vim
au BufRead,BufNewFile .tmux.conf set ft=tmux.conf
au BufRead .msmtprc set ft=msmtp
au BufRead ~/.config/dwb/settings set ft=cfg

" -- logs
au BufNewFile,BufRead .log{.*} set ft=messages
au BufRead pacman.log set ft=pacmanlog

" -- subtitles
au BufNewFile,BufRead *.srt set ft=srt
au BufNewFile,BufRead *.sub set ft=sub
au BufNewFile,BufRead *.mpl set ft=mpl
au BufNewFile,BufRead *.mpsub set ft=mpsub

" -- .txt .eml .tex
"au BufRead *.txt set tw=0 wm=78
au BufRead *.txt set tw=78
au BufNewFile,BufRead *.eml set fo=cq wm=0 tw=78
au BufNewFile,BufRead *.tex set tw=78

" -- mutt
au BufRead /tmp/mutt* :source ~/.vim/mail
au BufRead ~/.mutt/temp/mutt-* set tw=76 ft=mail " nocindent spell " width, mail syntax hilight, spellcheck

" -- misc config files
au BufReadPost * if line("'\"")>0 && line("'\"")<=line("$")|exe "normal g`\""|endif
au BufNewFile,BufRead Trolltech.conf,.mpdasrc,.xchm,.*toprc set ft=cfg
au BufNewFile,BufRead *.service set ft=systemd

" -- scripts exec bit
" automatically give executable permissions if file
" begins with #! and contains '/bin/' in the path
au BufWritePost * if getline(1) =~ "^#!" | if getline(1) =~ "/bin/" | silent execute "!chmod a+x <afile>" | endif | endif

" -- openssl
au BufReadPost,FileReadPost creds.aes set foldexpr=HeadlineDelimiterExpression(v:lnum)
au BufReadPost,FileReadPost creds.aes set foldlevel=0
au BufReadPost,FileReadPost creds.aes set foldcolumn=0
au BufReadPost,FileReadPost creds.aes set foldmethod=expr
au BufReadPost,FileReadPost creds.aes set foldtext=getline(v:foldstart)
au BufReadPost,FileReadPost creds.aes nnoremap <silent><space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<CR>
au BufReadPost,FileReadPost creds.aes highlight Folded ctermbg=88 ctermfg=250

" -- xml
let g:xml_syntax_folding=1
au FileType xml set foldlevel=1
au FileType xml set foldnestmax=2
"au FileType xml set foldcolumn=1
au FileType xml set foldmethod=syntax

" -- .ejs
au BufNewFile,BufRead *ejs set ft=mason
au BufNewFile,BufRead *.ejs set ft=jst

" -- json
au! BufRead,BufNewFile *.json set ft=json foldmethod=syntax

" -- html conversion (:help 2html.vim)
let g:html_use_css = 1
let g:use_xhtml = 1
let g:html_use_encoding = "utf8"
let g:html_number_lines = 1
"}}}

" ### KEYBOARD & MOUSE {{{
" -- map keys to toggle functions
function! MapToggle(key, opt)
  let cmd = ':set '.a:opt.'! \| set '.a:opt."?\<CR>"
  exec 'nnoremap '.a:key.' '.cmd
  exec 'inoremap '.a:key." \<C-O>".cmd
endfunction
command! -nargs=+ MapToggle call MapToggle(<f-args>)

" -- buftabs
noremap <F3> :bprev<CR>
noremap <F4> :bnext<CR>
let g:buftabs_only_basename=1
let g:buftabs_separator = "."
let g:buftabs_marker_start = "["
let g:buftabs_marker_end = "]"
let g:buftabs_marker_modified = "*"

" -- semicolon enters ex mode
map ; :

" -- xelatex
map <C-v> :!latexmk -quiet -xelatex -pvc -new-viewer- -view=pdf % > /dev/null 2>&1 &<cr><cr>

" -- NERDTree
nmap <silent> <F9> :NERDTreeToggle<CR>
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\env','\.vim$', '\~$', '\.pyc$', '\.swp$', '\.egg-info$', '^dist$', '^build$']
let NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\~$']
let NERDTreeShowBookmarks=1
let NERDTreeHightlightCursorline=0
"let NERDChristmasTree=1
"let NERDTreeAutoCenter=0
"let NERDTreeShowLineNumbers=1
"let NERDTreeWinSize=40
"let NERDTreeMinimalUI=1
let NERDTreeDirArrows=0

" -- DistractFree
let g:distractfree_width = '70%'
let g:distractfree_colorscheme = 'eu3writer'
let g:distractfree_keep_options = 'textwidth=60'
nmap <silent> <F12> :DistractFreeToggle<CR>

" -- folding
map <C-m> <C-M>
map <C-r> <C-R>

" -- space bar un-highligts search
noremap <silent> <Space> :silent noh<Bar>echo<CR>

" --- keys & functions
MapToggle <F5> spell
MapToggle <F6> hlsearch

" -- tab key in visual mode
vmap <tab> >gv
vmap <S-tab> <gv

" -- leader
let mapleader = ","
let g:BASH_MapLeader  = '.'
nnoremap <Leader>c :set cursorline!<CR>

" -- urxvt home / end
" the other is for insert mode
map  <Esc>[7~ <Home>
map  <Esc>[8~ <End>
imap <Esc>[7~ <Home>
imap <Esc>[8~ <End>
"set nolist  " list disables linebreak
imap <silent> <Down> <C-o>gj
imap <silent> <Up> <C-o>gk
nmap <silent> <Down> gj
nmap <silent> <Up> gk
nmap <silent> k gk
nmap <silent> j gj

" -- allow saving files as root
cnoremap w!! w !sudo tee % >/dev/null

" -- mouse
if has('mouse')
  set mouse=a
endif
set mousemodel=popup_setpos
"}}}

" ### MISC SETTINGS {{{
" -- show syntax highlighting groups for word under cursor
nmap <C-S-P> :call <SID>SynStack()<CR>
function! <SID>SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc
"}}}
