# Midnight Commander 3.0 extension file {{{
# Warning: Structure of this file has changed completely with version 3.0
#
# All lines starting with # or empty lines are thrown away.
# Lines starting in the first column should have following format:
#
# keyword/descNL, i.e. everything after keyword/ until new line is desc
#
# keyword can be:
#
#    shell (desc is, when starting with a dot, any extension (no wildcars),
#          i.e. matches all the files *desc . Example: .tar matches *.tar;
#          if it doesn't start with a dot, it matches only a file of that name)
#
#    shell/i (desc is, when starting with a dot, any extension (no wildcars),
#          The same as shell but with case insensitive.
#
#    regex (desc is an extended regular expression)
#          Please note that we are using the GNU regex library and thus
#          \| matches the literal | and | has special meaning (or) and
#          () have special meaning and \( \) stand for literal ( ).
#
#    regex/i (desc is an extended regular expression)
#          The same as regex but with case insensitive.
#
#    type  (file matches this if `file %f` matches regular expression desc
#          (the filename: part from `file %f` is removed))
#
#    type/i (file matches this if `file %f` matches regular expression desc)
#          The same as type but with case insensitive.
#
#    directory (matches any directory matching regular expression desc)
#
#    include (matches an include directive)
#
#    default (matches any file no matter what desc is)
#
# Other lines should start with a space or tab and should be in the format:
#
# keyword=commandNL (with no spaces around =), where keyword should be:
#
#    Open (if the user presses Enter or doubleclicks it),
#
#    View (F3), Edit (F4)
#
#    Include is the keyword used to add any further entries from an include/
#    section
#
# command is any one-line shell command, with the following substitutions:
#
# %% -> % character
# %p -> name of the current file (without path, but pwd is its path).
#       Also provided to external application as MC_EXT_BASENAME
#       global variable
# %f -> name of the current file. Unlike %p, if file is located on a
#	non-local virtual filesystem, i.e. either tarfs or ftpfs,
#	then the file will be temporarily copied into a local directory
#	and %f will be the full path to this local temporal file.
#	If you don't want to get a local copy and want to get the
#	virtual fs path (like /#ftp:ftp.cvut.cz/pub/hungry/xword), then
#	use %d/%p instead of %f.
#       Also provided to external application as MC_EXT_FILENAME
#       global variable
# %d -> name of the current directory (pwd, without trailing slash)
#       Also provided to external application as MC_EXT_CURRENTDIR
#       global variable
# %s -> "selected files", i.e. space separated list of tagged files if any
#       or name of the current file.
#       Also provided to external application as MC_EXT_SELECTED
#       global variable
# %t -> list of tagged files
#       Also provided to external application as MC_EXT_ONLYTAGGED
#       global variable
# %u -> list of tagged files (they'll be untaged after the command)
#
# (If these 6 letters are in uppercase, they refer to the other panel.
# But you shouldn't have to use it in this file.)
#
#
# %cd -> the rest is a path mc should change into (cd won't work, since it's
#	a child process).  %cd handles even vfs names.
#
# %view -> the command you type will be piped into mc's internal file viewer
#	if you type only the %view and no command, viewer will load %f file
#	instead (i.e. no piping, so it is different to %view cat %f)
#	%view may be directly followed by {} with a list of any of
#	ascii (Ascii mode), hex (Hex mode), nroff (color highlighting for
#	text using backspace for bold and underscore) and unform
#	(no highlighting for nroff sequences) separated by commas.
#
# %var -> You use it like this: %var{VAR:default}.  This macro will expand
#       to the value of the VAR variable in the environment if it's set
#       otherwise the value in default will be used.  This is similar to
#       the Bourne shell ${VAR-default} construct.
#
# Rules are applied from top to bottom, thus the order is important.
# If some actions are missing, search continues as if this target didn't
# match (i.e. if a file matches the first and second entry and View action
# is missing in the first one, then on pressing F3 the View action from
# the second entry will be used. default should catch all the actions.
#
# Any new entries you develop for you are always welcome if they are
# useful on more than one system.  You can post your modifications
# as tickets at www.midnight-commander.org


### Changes ###
#
# Reorganization: 2012-03-07 Slava Zanko <slavazanko@gmail.com>
#}}}

### GIT Repo ---------------- ### {{{
# gitfs changeset
regex/^\[git\]
  Open=%cd %p/changesetfs://
  View=%cd %p/patchsetfs://
#}}}

### Archives ---------------- ### {{{

# .tgz, .tpz, .tar.gz, .tar.z, .tar.Z, .ipk, .gem, .war
regex/\.t([gp]?z|ar\.g?[zZ])$|\.ipk$|\.gem$|\.war$
  Open=%cd %p/utar://
  View=$VIEWER %f

shell/.tar.bz
  Open=%cd %p/utar://
  View=$VIEWER %f

regex/\.t(ar\.bz2|bz2?|b2)$
  Open=%cd %p/utar://
  View=$VIEWER %f

# .tar.lzma, .tlz
regex/\.t(ar\.lzma|lz)$
  Open=%cd %p/utar://
  View=lzma -dc %f | $VIEWER

# .tar.xz, .txz
regex/\.t(ar\.xz|xz)$
  Open=%cd %p/utar://
  #View=xz -dc %f 2>/dev/null | $VIEWER
  View=$VIEWER %f

# .tar.F - used in QNX
shell/.tar.F
  Open=%cd %p/utar://
  View=$VIEWER %f

# .qpr/.qpk - QNX Neutrino package installer files
regex/\.qp[rk]$
  Open=%cd %p/utar://
  View=$VIEWER %f

# tar
shell/i/.tar
  Open=%cd %p/utar://
  View=$VIEWER %f

# lha
type/^LHa\ .*archive
  Open=%cd %p/ulha://
  View=lh l %f | $VIEWER

# arj
regex/i/\.a(rj|[0-9][0-9])$
  Open=%cd %p/uarj://
  View=unarj l | $VIEWER

# cab
shell/i/.cab
  Open=%cd %p/ucab://
  View=cabextract -l %f 2>/dev/null | $VIEWER

# ha
shell/i/.ha
  Open=%cd %p/uha://
  View=$VIEWER %f

# rar
regex/i/\.r(ar|[0-9][0-9])$
  Open=%cd %p/urar://
  View=$VIEWER %f

# ALZip
shell/i/.alz
  Open=%cd %p/ualz://
  View=$VIEWER %f

# cpio
shell/.cpio.Z
  Open=%cd %p/ucpio://
  View=$VIEWER %f

shell/.cpio.xz
  Open=%cd %p/ucpio://
  View=$VIEWER %f

shell/.cpio.gz
  Open=%cd %p/ucpio://
  View=$VIEWER %f

shell/i/.cpio
  Open=%cd %p/ucpio://
  View=$VIEWER %f

# 7zip archives (they are not man pages)
shell/i/.7z
  Open=%cd %p/u7z://
  View=$VIEWER %f

# patch
regex/\.(diff|patch)(\.bz2)$
  Open=%cd %p/patchfs://
  View=$VIEWER %f

regex/\.(diff|patch)(\.(gz|Z))$
  Open=%cd %p/patchfs://
  View=$VIEWER %f

# ls-lR
regex/(^|\.)ls-?lR(\.gz|Z|bz2)$
  Open=%cd %p/lslR://
  View=$VIEWER %f

# trpm
shell/.trpm
  Open=%cd %p/trpm://
  View=rpm -qivl --scripts `basename %f .trpm` | $VIEWER

# RPM packages (SuSE uses *.spm for source packages)
regex/\.(src\.rpm|spm)$
  Open=%cd %p/rpm://
  View=rpm --nosignature -qivlp %f | $VIEWER

shell/.rpm
  Open=%cd %p/rpm://
  View=rpm --nosignature -qivlp %f | $VIEWER

# deb
regex/\.u?deb$
  Open=%cd %p/deb://
  View=$VIEWER %f

# dpkg
shell/.debd
  Open=%cd %p/debd://
  View=$VIEWER %f

# apt
shell/.deba
  Open=%cd %p/deba://
  View=$VIEWER %f

# ISO9660
shell/i/.iso
  Open=%cd %p/iso9660://
  View=$VIEWER %f

# ar library
regex/\.s?a$
  Open=%cd %p/uar://
  #Open=%view{ascii} ar tv %f
  View=$VIEWER %f

# gplib
shell/i/.lib
  Open=%cd %p/ulib://
  View=(gplib -t %f || >&2 | \
  /usr/bin/perl -e '@a=split /[\s\t]+/, <>; printf ("%-30s | \
  %10d | %s.%s.%02d | %s\n", $a[0], ($a[1]*1),$a[7], lc($a[4]), \
  $a[5], $a[6])) | $VIEWER


# Mailboxes
type/^ASCII\ mail\ text
  Open=%cd %p/mailfs://
  View=$VIEWER %f

# diff / patch
regex/\.(diff|patch)$
  Open=%cd %p/patchfs://
  View=$VIEWER %f
#}}}

### Sources ----------------- ### {{{

# C/C++
regex/i/\.(c|cc|cpp)$
  Open=$EDITOR %f
  View=$VIEWER %f

# C/C++ header
regex/i/\.(h|hh|hpp)$
  Open=$EDITOR %f
  View=$VIEWER %f

# Fortran
shell/i/.f
  Open=$EDITOR %f
  View=$VIEWER %f

# Assembler
regex/i/\.(s|asm)$
  Open=$EDITOR %f
  View=$VIEWER %f

# .so libraries
regex/\.(so|so\.[0-9\.]*)$
  View=(file %f && echo && nm -C -D %f) | $VIEWER

# Object
type/^ELF
  #Open=%var{PAGER:more} %f
  View=(file %f && echo && nm -C %f) | $VIEWER
#}}}

### Documentation ----------- ### {{{

# Texinfo
#regex/\.(te?xi|texinfo)$

# GNU Info page
type/^Info\ text
  Open=/usr/bin/pinfo -f %f

shell/.info
  Open=/usr/bin/pinfo -f %f

# Manual page
regex/(([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])|\.man)$
  Open=(zsoelim %f | nroff -c -mandoc) | $VIEWER
  View=$VIEWER %f

# Perl pod page
shell/.pod
  Open=(pod2man %f | nroff -c -mandoc) | $VIEWER
  View=(pod2man %f | nroff -c -mandoc) | $VIEWER

# Troff with me macros.
# Exception - "read.me" is not a nroff file.
shell/read.me
  Open=$EDITOR %f
  View=$VIEWER %f

shell/.me
  Open=nroff -c -me %f | $VIEWER
  View=nroff -c -me %f | $VIEWER

# Troff with ms macros.
shell/.ms
  Open=nroff -c -ms %f | $VIEWER
  View=nroff -c -ms %f | $VIEWER

# Manual page - compressed
regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.g?[Zz]$
  Open=(gzip -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER
  View=(gzip -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz$
  Open=(bzip -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER
  View=(bzip -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.bz2$
  Open=(bzip2 -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER
  View=(bzip2 -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.lzma$
  Open=(lzma -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER
  View=(lzma -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER

regex/([^0-9]|^[^\.]*)\.([1-9][A-Za-z]*|[ln])\.xz$
  Open=(xz -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER
  View=(xz -dc %f | zsoelim | nroff -c -mandoc) | $VIEWER

# CHM
shell/i/.chm
  #View=chm_http %f | w3m http://localhost:8080/
  Open=chmsee %f >/dev/null 2>&1 &
#}}}

### Images ------------------ ### {{{

type/^GIF
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^JPEG
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^PC\ bitmap
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^PNG
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^JNG
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^MNG
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^TIFF
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^PBM
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^PGM
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^PPM
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

type/^Netpbm
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

shell/.xbm
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

shell/.xpm
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &

shell/.ico
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=sxiv %f * >/dev/null 2>&1 &
 
shell/.psd
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=gimp %f &

shell/.xcf
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=gimp %f &

shell/i/.svg
  View=(identify %f; test -x /usr/bin/exiv2 && echo && exiv2 %f 2>/dev/null) | $VIEWER
  Open=gimmage %f >/dev/null 2>&1 &
#}}}

### Fonts ------------------- ### {{{

shell/.ttf
  View=fc-query %f | $VIEWER
  Open=gnome-font-viewer %f >/dev/null 2>&1

shell/.otf
  View=fc-query %f | $VIEWER
  Open=gnome-font-viewer %f >/dev/null 2>&1

shell/.dfont
  View=fc-query %f | $VIEWER
  Open=gnome-font-viewer %f >/dev/null 2>&1

shell/.ttc
  View=fc-query %f | $VIEWER
  Open=gnome-font-viewer %f >/dev/null 2>&1

shell/.pfa
  View=fc-query %f | $VIEWER
  Open=gnome-font-viewer %f >/dev/null 2>&1

shell/.pfb
  View=fc-query %f | $VIEWER
  Open=gnome-font-viewer %f >/dev/null 2>&1

regex/\.pcf(\.gz)$
  View=$VIEWER %f
  Open=gnome-font-viewer %f >/dev/null 2>&1

shell/.afm
  View=$VIEWER %f
  Open=$EDITOR %f
#}}}

### Sound files ------------- ### {{{

regex/i/\.(wav|snd|voc|au|smp|aiff|snd|m4a|ape|aac|wv)$
  View=mediainfo %f | $VIEWER
  Open=mplayer -vo null -nosub %f

regex/i/\.(mod|s3m|xm|it|mtm|669|stm|ult|far)$
  View=mediainfo %f | $VIEWER
  Open=mikmod %f

shell/i/.waw22
  View=mediainfo %f | $VIEWER
  Open=mplayer -vo null -nosub %f

shell/i/.mp3
  Open=mplayer -vo null -nosub %f
  View=mediainfo %f | $VIEWER

regex/i/\.og[gax]$
  Open=mplayer -vo null -nosub %f
  View=ogginfo %f | $VIEWER

regex/i/\.(spx|flac)$
  Open=mplayer -vo null -nosub %f
  View=mediainfo %f | $VIEWER

regex/i/\.(midi?|rmid?)$
  View=mediainfo %f | $VIEWER
  Open=timidity %f

shell/i/.wma
  Open=mplayer -vo null -nosub %f
  View=mediainfo %f | $VIEWER
#}}}

### Play lists -------------- ### {{{

regex/i/\.(m3u|pls)$
  Open=mplayer -vo null -playlist %f
#}}}

### Video ------------------- ### {{{

shell/i/.3gp
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.avi
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

regex/i/\.as[fx]$
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.divx
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.mkv
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

regex/i/\.(mov|qt)$
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

regex/i/\.(mp4|m4v|mpe?g)$
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

# MPEG-2 TS container + H.264 codec
shell/i/.mts
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.rmvb
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.ts
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.vob
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.wmv
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

regex/i/\.fl[icv]$
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

shell/i/.ogv
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

regex/i/\.ra?m$
  #Open=/usr/lib/mc/ext.d/video.sh open ram
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

# WebM
shell/i/.webm
  Open=([ -n "$DISPLAY" ] && detach mplayer %f >/dev/null 2>&1 || mplayer -vo null %f)
  View=mediainfo %f | $VIEWER

#}}}

### Documents --------------- ### {{{

# Postscript
type/^PostScript
  Open=([ -n "$DISPLAY" ] && zathura %f >/dev/null 2>&1 || ps2ascii | $VIEWER) &
  View=ps2ascii %f | $VIEWER

# PDF
type/^PDF
  Open=([ -n "$DISPLAY" ] && zathura %f >/dev/null 2>&1 || pdftotext -layout -nopgbrk %f - | $VIEWER) &
  View=pdftotext -layout -nopgbrk %f - | $VIEWER

# html
regex/i/\.html?$
  Open=w3m %f
  View=$VIEWER %f

# StarOffice 5.2
shell/.sdw
  Open=loffice %f >/dev/null 2>&1 &
  View=$VIEWER %f

# StarOffice 6 and OpenOffice.org formats
regex/i/\.(odt|ott|sxw|stw|ods|ots|sxc|stc|odp|otp|sxi|sti|odg|otg|sxd|std|odb|odf|sxm|odm|sxg)$
  Open=loffice %f >/dev/null 2>&1 &
  View=unzip -p %f content.xml | o3totxt | $VIEWER

# AbiWord
shell/.abw
  Open=abiword %f

# Gnumeric
shell/i/.gnumeric
  Open=gnumeric %f

# Microsoft Word Document
regex/i/\.(do[ct]|wri)$
  Open=loffice %f >/dev/null 2>&1 &
  View=antiword -t %f
type/^Microsoft\ Word
  Open=/usr/lib/mc/ext.d/doc.sh open msdoc
  View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msdoc

# RTF document
shell/i/.rtf
  Open=loffice %f  >/dev/null 2>&1 &
  View=catdoc %f | $VIEWER

# Microsoft Excel Worksheet
regex/i/\.xl[sw]$
  Open=strings %f
  View=loffice %f >/dev/null 2>&1 &
type/^Microsoft\ Excel
  Open=loffice %f  >/dev/null 2>&1 &
  View=strings %f | $VIEWER

regex/i/\.(ppt|pps)$
  Open=loffice $f >/dev/null 2>&1 &
  View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view msppt

# Use OpenOffice.org to open any MS Office documents
type/^Microsoft\ Office\ Document
  Open=loffice %f >/dev/null 2>&1 &

# Framemaker
type/^FrameMaker
  Open=/usr/lib/mc/ext.d/doc.sh open framemaker

# DVI
shell/i/.dvi
  Open=([ -n "$DISPLAY" ] && xdvi %f || dvi2tty %f)
  View=dvi2tty %f

# TeX
shell/i/.tex
  #Include=editor
  Open=$EDITOR
  View=$VIEWER %f

# DjVu
regex/i/\.djvu?$
  Open=/usr/lib/mc/ext.d/doc.sh open djvu
  View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view djvu

# Comic Books
regex/i/\.cb[zr]$
  Open=/usr/lib/mc/ext.d/doc.sh open comic

# Epub
shell/i/.epub
  Open=/usr/lib/mc/ext.d/doc.sh open epub
  View=%view{ascii} /usr/lib/mc/ext.d/doc.sh view epub
#}}}

### Miscellaneous ----------- ### {{{

# Compiled Java classes
shell/.class
  View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view javaclass

# Makefile
regex/[Mm]akefile$
  Open=make -f %f %{Enter parameters}

# Imakefile
shell/Imakefile
  Open=/usr/lib/mc/ext.d/misc.sh open imakefile

# Makefile.PL (MakeMaker)
regex/^Makefile.(PL|pl)$
  Open=%var{PERL:perl} %f

# sqlite3.db
type/^SQLite 3.x database
  Open=/usr/lib/mc/ext.d/misc.sh open sqlite
  View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view sqlite

# dbf
shell/i/.dbf
  Open=/usr/lib/mc/ext.d/misc.sh open dbf
  View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view dbf

# REXX script
regex/\.(rexx?|cmd)$
       Open=rexx %f %{Enter parameters};echo "Press ENTER";read y

# Disk images for Commodore computers (VIC20, C64, C128)
shell/i/.d64
  Open=%cd %p/uc1541://
  View=%view{ascii} c1541 %f -list
  Extract=c1541 %f -extract

# Glade, a user interface designer for GTK+ and GNOME
shell/i/.glade
  Open=/usr/lib/mc/ext.d/misc.sh open glade

# Gettext Catalogs
shell/.mo
  View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view mo

# lyx
shell/i/.lyx
  Open=/usr/lib/mc/ext.d/misc.sh open lyx
  View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view lyx

# torrent
shell/i/.torrent
  View=%view{ascii} /usr/lib/mc/ext.d/misc.sh view torrent
#}}}

### Plain compressed files -- ### {{{

# ace
shell/i/.ace
  Open=%cd %p/uace://
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view ace
  Extract=unace x %f

# arc
shell/i/.arc
  Open=%cd %p/uarc://
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view arc
  Extract=arc x %f '*'
  Extract (with flags)=I=%{Enter any Arc flags:}; if test -n "$I"; then arc x $I %f; fi

# zip
type/i/^zip\ archive
  Open=%cd %p/uzip://
  View=$VIEWER %f

# zoo
shell/i/.zoo
  Open=%cd %p/uzoo://
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view zoo

# gzip
type/^gzip
  Open=/usr/lib/mc/ext.d/archive.sh view gz %var{PAGER:more}
  View=$VIEWER %f

regex/\.(gz|Z)$
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view gz

# bzip2
type/^bzip2
  Open=/usr/lib/mc/ext.d/archive.sh view bzip2 %var{PAGER:more}
  View=$VIEWER %f

regex/\.bz2?$
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view bz2

# bzip
type/^bzip
  Open=/usr/lib/mc/ext.d/archive.sh view bzip %var{PAGER:more}
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view bzip

# compress
type/^compress
  Open=/usr/lib/mc/ext.d/archive.sh view gz %var{PAGER:more}
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view gz

# lzma
regex/\.lzma$
  Open=/usr/lib/mc/ext.d/archive.sh view lzma %var{PAGER:more}
  View=%view{ascii} /usr/lib/mc/ext.d/archive.sh view lzma

# xz
regex/\.xz$
  Open=xz -dc %f | more
  View=xd -dc %f | $VIEWER

# Parity Archive
type/^Parity\ Archive\ Volume\ Set
  Open=/usr/lib/mc/ext.d/archive.sh open par2
#}}}

### Default ----------------- ### {{{

# Default target for anything not described above
default/*
  Open=
  View=$VIEWER %f
#}}}

### EOF ###
