#!/bin/bash

# Originally Based on code by Dieter Plaetinck.
# Pretty much re-written by Mina Nagy (mnzaki)
# customized by bohoomil

config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/dmenu"
mkdir -p "$config_dir"

if [ -f $config_dir/dmenurc ]; then
  . $config_dir/dmenurc && dmenu_cmd="dmenu -i $dmenu_cfg"
else
  dmenu_cmd="dmenu -i"
fi

terminal="urxvtc -e"
max_recent=20 # Number of recent commands to track

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/dmenu-recent"
recent_cache="$cache_dir/recent"
rest_cache="$cache_dir/all"
blacklist_cfg="$config_dir/blacklist"
known_types=" background terminal terminal_hold "

[ ! -d "$config_dir" ] && mkdir -p "$config_dir"
[ ! -d "$cache_dir" ] && mkdir -p "$cache_dir"
[ ! -f "$recent_cache" ] && touch "$recent_cache"
[ ! -f "$blacklist_cfg" ] && touch "$blacklist_cfg"
[ ! -f "$rest_cache" ] && touch "$rest_cache"

IFS=:
if stest -dqr -n "$rest_cache" $PATH 2>/dev/null; then
  stest -flx $PATH | sort -u | grep -vf "$recent_cache" > "$rest_cache"
fi

IFS=" "
cmd=$(cat "$recent_cache" "$rest_cache" | grep -vxFf "$blacklist_cfg" | $dmenu_cmd -p Execute: "$@") || exit

if ! grep -qx "$cmd" "$recent_cache" &> /dev/null; then
  grep -vx "$cmd" "$rest_cache" > "$rest_cache.$$"
  mv "$rest_cache.$$" "$rest_cache"
fi

echo "$cmd" > "$recent_cache.$$"
grep -vx "$cmd" "$recent_cache" | head -n "$max_recent" >> "$recent_cache.$$"
mv "$recent_cache.$$"  "$recent_cache"

# Figure out how to run the command based on the command name, disregarding
# arguments, if any.
word0=${cmd%% *}
match="^$word0$"

get_type () {
  while type=$(echo $known_types | xargs -n1 | $dmenu_cmd -p Type:); do
    [[ $known_types =~ " $type " ]] || continue
    echo "$word0" >> "$config_dir/$type"
    break
  done
  echo $type
}

if ! type=$(grep -lx "$match" -R "$config_dir"); then
  type=$(get_type)
else
  type=${type##*/}
  if ! [[ $known_types =~ " $type " ]]; then
    rm "$config_dir/$type"
    type=$(get_type)
  fi
fi

[[ "$type" = "background" ]] && exec $cmd
[[ "$type" = "terminal" ]] && exec $terminal "$cmd"
[[ "$type" = "terminal_hold" ]] &&
  exec $terminal sh -c "$cmd && echo Press Enter to terminate... && read line"

