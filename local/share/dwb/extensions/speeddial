//
//  Copyright (c) 2012 Stefan Bolte <portix@gmx.net>
//
//  This program is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 3 of the License, or
//  (at your option) any later version.
//  
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//  
//  You should have received a copy of the GNU General Public License along
//  with this program; if not, write to the Free Software Foundation, Inc.,
//  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
//
/*<INFO
Speeddial
INFO>*/


var defaultConfig = {
//<DEFAULT_CONFIG
    // Shortcut for adding a site
    add : "sda",
    // Shortcut for showing the speedial site
    show : "sds", 
    // Command for adding a site
    cmdAdd : null,
    // Shortcut for showing the speedial site
    cmdShow : null,
    // Number of vertical items, if set to null there will be no limit for
    // number of items
    nVert : 3, 
    // Number of horizontal items
    nHorz : 3,
    // Limit of number of items, <= 0 means no limit 
    limit : 0,
    // Whether to update snapshot images every time a bookmarked site is visited
    autoUpdate : false,
    // Cachedir where the template file and snapshots are saved
    cachedir : system.getEnv("HOME") + "/.local/share/dwb/speeddial",
    // Width of a snapshot image
    snapshotWidth : 640, 
    // Height of a snapshot image
    snapshotHeight : 480
//>DEFAULT_CONFIG
};

var templatePath;
var cacheDataFile;
var cacheData = {};
const version = 1;
var meta = {};
var self = this;
var config = { };

var template = function() { /***
<head>
    <style type="text/css">
        body {
            margin : 4%;
        }
        @-webkit-keyframes shadowin {
            from { box-shadow : 0px 0px 4px 4px #ccc; }
            to { box-shadow : 0px 0px 4px 4px #666; }
        }
        @-webkit-keyframes buttonhover {
            from { opacity : 0.5; }
            to { opacity : 1; text-shadow : 0px 0px 4px 4px #666; }
        }
        @-webkit-keyframes texthover {
            from { opacity : 0.5; }
            to { opacity : 1;  text-shadow: 0px 0px 2px #666; }
        }
        .row {
            width : 100%;
        }
        .cell {
            display : inline-block;
            position:relative;
        }
        .item {
            width : 80%;
            height : 80%;
            margin:auto;
            position : relative;
            background-color: #fff;
        }
        img {
            width : 100%;
            height : 100%;
            box-shadow : 0px 0px 4px 4px #ccc;
            position:absolute;
        }
        img:hover {
            box-shadow : 0px 0px 4px 4px #666;
            -webkit-animation: shadowin 150ms;
        }
        .info {
            width:80%;
            top:5px;
            margin:auto;
            position:relative;
        }
        .button {
            font: 14px helvetica bold;
            color:#333;
            cursor: pointer;
            opacity: 0.3;
            float:right;
            po
        }
        .button:hover {
            opacity: 1;
            text-shadow: 0px 0px 5px #666;
            -webkit-animation: buttonhover 150ms;
        }
        .button:after {
            content: "\0274c"
        }
        .text {
            cursor : pointer;
            white-space: nowrap;
            text-overflow: ellipsis;
            color: #333;
            font: 11px helvetica;
            overflow:hidden;
            width:85%;
            opacity:0.6
        }
        .text:hover {
            opacity: 1;
            text-shadow: 0px 0px 2px #666;
            -webkit-animation: texthover 150ms;
        }
    </style>
<script>
    var construct = function(name, args, ref) 
    {
        var node = document.createElement(name);
        for (var key in args) 
            node[key] = args[key];
        if (ref) 
            ref.appendChild(node);
        return node;
    };
    var addImage = function(uri, path) 
    {
        var cell = construct("div", { className : "cell" }, document.body);
        var item = construct("div", { className : "item" }, cell);
        var img = construct("img", { src : path, onclick : function() { location.href =  uri; } }, item);
        var info = construct("div", { className : "info" }, cell);

        var button = construct("div", { className : "button" }, info);
        button.setAttribute("onclick", "void(0)");
        button.onclick = function() { location.href += "?d=" + encodeURIComponent(uri); };

        var link = construct("div", { className : "text", innerHTML : uri }, info);
        link.setAttribute("onclick", "void(0)");
        link.onclick = function() { location.href = uri; };
    };
    addAll = function(o, v, h)  
    {
        var rule = ".cell{width:" + parseInt(100/h) + "%" + "; height:" + parseInt(100/v) + "%;}";
        document.styleSheets[0].insertRule(rule, 0);
        for (var key in o) 
            addImage(key, o[key]);
    };
</script>
</head>
<body>
</body>
***/}

var getNItems = function() 
{
    var i=0, key;
    for (key in cacheData)
      i++;
    return i;
};

var heredoc = function(func) 
{
  return func.toString().replace(/[^]*\/\*\*\*|\*\*\*\/[^]*/g, "");
};

var removeFile = function(filename) 
{
    if (system.fileTest(filename, FileTest.regular)) 
        system.spawn("rm " + filename);
};

var deleteItem = function(uri) 
{
    removeFile(cacheData[uri]);
    delete cacheData[uri];
    saveMeta();
};

var saveMeta = function() 
{
    meta.cache = cacheData;
    io.write(cacheDataFile, "w", JSON.stringify(meta));
};

var save = function(wv, auto) 
{
    var notice = "added";
    if (cacheData[wv.uri])
        notice = "updated";
    snapshot(wv);
    if (!auto) 
        io.notify("speeddial: " + wv.uri + " " + notice);
};

var checkSave = function(auto, webview, uri) 
{
    var wv = webview || tabs.current;

    if (auto || wv.LoadStatus != LoadStatus.finished) 
    {
        var sig = wv.connect("notify::load-status", function() {
            if (wv.loadStatus == LoadStatus.finished) 
            {
                if (wv.uri == uri)
                    save(wv, auto);
                wv.disconnect(sig);
            }
            else if (wv.loadStatus == LoadStatus.error) 
            {
                io.error("speeddial: failed to save website");
                wv.disconnect(sig);
            }
        });
    }
    else 
        save(wv, auto);
};

var snapshot = function(wv) 
{
    var uri = wv.uri;
    var oldFilename = cacheData[uri];
    var filename = config.cachedir + "/" + wv.mainFrame.host + String(new Date().getTime()).substring(7) + ".png";
    if (wv.toPng(filename, config.snapshotWidth, config.snapshotHeight) === 0) 
    {
        if (oldFilename)
            removeFile(oldFilename);
        cacheData[uri] = filename;
        saveMeta();
    }
    else 
        io.debug({ message : "Cannot create snapshot"} );
};

var addDial = function(auto, webview, uri) 
{
    webview = webview || tabs.current;
    uri = uri || tabs.current.uri;
    if (! auto && ! cacheData[webview.uri] && config.limit > 0 && config.limit == getNItems()) 
    {
        var labels = [];

        for (var uri in cacheData)
            labels.push({ left : uri });

        util.tabComplete("Maximum exceeded, delete:", labels, function(response) {
            if (response) 
            {
                deleteItem(response);
                checkSave(auto, webview, uri);
            }
        }, true);
    }
    else 
        checkSave(auto, webview, uri);
}

var addDialBind = addDial.bind(null, false, null, null);

var showDial = function() 
{
    script.setPrivate(tabs.current, "pending", true);
    tabs.current.loadUri(templatePath, function(wv) {
        if (wv.loadStatus == LoadStatus.finished) 
            wv.mainFrame.inject("addAll(" + JSON.stringify(cacheData) + ", " + config.nVert + ", " + config.nHorz + ")");
        if (wv.loadStatus == LoadStatus.finished || wv.loadStatus == LoadStatus.error) {
            script.setPrivate(wv, "pending", false);
            return true;
        }
    });
};

var parseUri = function(uri)
{
    var parts, qb;

    qb = uri.indexOf("?");
    if (qb != -1) 
    {
        parts = uri.substring(qb+1).split("=");
        if (parts[0] == "d") 
        {
            deleteItem(decodeURIComponent(parts[1]));
            showDial();
            return true;
        }
    }
    return false;
};

var onNavigation = function(wv, frame, request) 
{
    var uri;

    // If the request comes from a site other than speeddial, ignore it 
    if (wv.uri && wv.uri.substr(0, templatePath.length) != templatePath)
        return false;

    uri = request.uri;

    if (wv == tabs.current && script.getPrivate(wv, "pending") != true && uri == templatePath) 
    {
        showDial();
        return true;
    }

    if (uri.substr(0, templatePath.length) == templatePath) 
      if (parseUri(uri)) 
        return true;

    if (config.autoUpdate && cacheData[uri]) 
        addDial(true, wv, uri);
};

var init = function() 
{
    bind(config.add, addDialBind, config.cmdAdd);
    bind(config.show, showDial, config.cmdShow);

    Signal.connect("navigation", onNavigation);

    templatePath = config.cachedir + "/speeddial.html";
    cacheDataFile = config.cachedir + "/.meta";

    if ( ! system.fileTest(config.cachedir, FileTest.dir)) 
        system.mkdir(config.cachedir, 0700);
    else if ( system.fileTest(cacheDataFile, FileTest.exists) ) 
    {
        try 
        {
            meta = JSON.parse(io.read(cacheDataFile));
            cacheData = meta.cache;
        }
        catch (e) {
            io.debug({ message : "Cannot read " + cacheDataFile, error : e });
            meta.cache = cacheData;
            meta.version = version;
        }
    }
    if (meta.version != version || ! system.fileTest(templatePath, FileTest.regular)) 
        io.write(templatePath, "w", heredoc(template));

    templatePath = "file://" + templatePath;
};

var speeddial = {
    add : addDialBind, 
    show : showDial,
};
Object.defineProperty(speeddial, "visible", {
    get : function() 
    {
      return tabs.current.uri == templatePath;
    }
});

return {
    exports : speeddial,
  
    defaultConfig : defaultConfig,

    init : function(c) 
    {
        config = c;
        speeddial.config = config;
        init();
        return true;
    },

    end : function(c) 
    {
        unbind(showDial);
        unbind(addDialBind);
        Signal.disconnect(sigNavigation);
    }
};
// vim:set ft=javascript:
